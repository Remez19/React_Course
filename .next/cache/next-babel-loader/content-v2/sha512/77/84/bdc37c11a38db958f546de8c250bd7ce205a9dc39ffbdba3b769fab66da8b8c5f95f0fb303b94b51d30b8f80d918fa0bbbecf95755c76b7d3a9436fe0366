{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/remez19/vsProjects/React/React-Nextjs-Project/pages/[meetupId]/index.js\";\nimport { Fragment } from \"react\";\nimport { MongoClient, ObjectId } from \"mongodb\";\nimport Head from \"next/head\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\n\nconst MeetupDetails = props => {\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: props.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: \"Indvidual meetup\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MeetupDetail, {\n      img: props.meetupData.image,\n      alt: props.meetupData.title,\n      address: props.meetupData.address,\n      description: props.meetupData.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n}; // Needed because its a dynamic page component and we using\n// getStaticProps\n\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect(\"mongodb+srv://Remez:vbMk3le70okvPy0r@react-udemy.bbvem7r.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const DataBase = client.db();\n  const meetupsCollection = DataBase.collection(\"meetups\"); // gewt only the id field\n\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray(); // Creating the pages paths dynamically (Array of paths)\n\n  client.close();\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect(\"mongodb+srv://Remez:vbMk3le70okvPy0r@react-udemy.bbvem7r.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const DataBase = client.db();\n  const meetupsCollection = DataBase.collection(\"meetups\"); // gewt only the id field\n\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId)\n  });\n  client.close();\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        title: selectedMeetup.title,\n        address: selectedMeetup.address,\n        image: selectedMeetup.image,\n        description: selectedMeetup.description\n      }\n    }\n  };\n}\nexport default MeetupDetails;\n/*\nconst DUMMY_MEETUPS = [\n  {\n    id: \"m1\",\n    title: \"Haifa City\",\n    image:\n      \"https://upload.wikimedia.org/wikipedia/commons/1/1d/Western_Haifa_from_the_air.jpg\",\n    address: \"Haifa\",\n    description: \"The First meetup\",\n  },\n  {\n    id: \"m2\",\n    title: \"Haifa City\",\n    image:\n      \"https://upload.wikimedia.org/wikipedia/commons/1/1d/Western_Haifa_from_the_air.jpg\",\n    address: \"Haifa-Center\",\n    description: \"The Second meetup\",\n  },\n];\n*/","map":{"version":3,"sources":["/Users/remez19/vsProjects/React/React-Nextjs-Project/pages/[meetupId]/index.js"],"names":["Fragment","MongoClient","ObjectId","Head","MeetupDetail","MeetupDetails","props","title","meetupData","image","address","description","getStaticPaths","client","connect","DataBase","db","meetupsCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","selectedMeetup","findOne","id"],"mappings":"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","sourcesContent":["import { Fragment } from \"react\";\nimport { MongoClient, ObjectId } from \"mongodb\";\nimport Head from \"next/head\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\nconst MeetupDetails = (props) => {\n  return (\n    <Fragment>\n      <Head>\n        <title>{props.title}</title>\n        <meta name=\"description\" content=\"Indvidual meetup\" />\n      </Head>\n      <MeetupDetail\n        img={props.meetupData.image}\n        alt={props.meetupData.title}\n        address={props.meetupData.address}\n        description={props.meetupData.description}\n      />\n    </Fragment>\n  );\n};\n\n// Needed because its a dynamic page component and we using\n// getStaticProps\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect(\n    \"mongodb+srv://Remez:vbMk3le70okvPy0r@react-udemy.bbvem7r.mongodb.net/meetups?retryWrites=true&w=majority\"\n  );\n  const DataBase = client.db();\n  const meetupsCollection = DataBase.collection(\"meetups\");\n  // gewt only the id field\n  const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray();\n  // Creating the pages paths dynamically (Array of paths)\n  client.close();\n  return {\n    fallback: false,\n    paths: meetups.map((meetup) => ({\n      params: { meetupId: meetup._id.toString() },\n    })),\n  };\n}\n\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect(\n    \"mongodb+srv://Remez:vbMk3le70okvPy0r@react-udemy.bbvem7r.mongodb.net/meetups?retryWrites=true&w=majority\"\n  );\n  const DataBase = client.db();\n  const meetupsCollection = DataBase.collection(\"meetups\");\n  // gewt only the id field\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId),\n  });\n  client.close();\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        title: selectedMeetup.title,\n        address: selectedMeetup.address,\n        image: selectedMeetup.image,\n        description: selectedMeetup.description,\n      },\n    },\n  };\n}\n\nexport default MeetupDetails;\n\n/*\nconst DUMMY_MEETUPS = [\n  {\n    id: \"m1\",\n    title: \"Haifa City\",\n    image:\n      \"https://upload.wikimedia.org/wikipedia/commons/1/1d/Western_Haifa_from_the_air.jpg\",\n    address: \"Haifa\",\n    description: \"The First meetup\",\n  },\n  {\n    id: \"m2\",\n    title: \"Haifa City\",\n    image:\n      \"https://upload.wikimedia.org/wikipedia/commons/1/1d/Western_Haifa_from_the_air.jpg\",\n    address: \"Haifa-Center\",\n    description: \"The Second meetup\",\n  },\n];\n*/\n"]},"metadata":{},"sourceType":"module"}